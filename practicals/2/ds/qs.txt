1. WAP to Find the largest element in an array using
Functions

2. WAP to Find the smallest element in an array using
Functions

3. WAP to Insert an element at a particular location in an
existing array.

4. WAP to Delete an element from a particular location in
an existing array.

5. WAP to Reverse the contents of an array using function.

6. WAP to Multiply 2 Matrices with following conditions-
Create the matrices dynamically (using malloc)
Create a function to read the elements in matrix
Create a function to print the elements of matrix
Create a function to multiply the elements of matrices

7. WAP to implement LINEAR SERCH using functions

8. WAP to implement BINARY SEARCH using functions
( use iterative method)

9. WAP to implement BINARY SEARCH using functions
(use recursive method)

10. WAP to implement BUBBLE SORT using functions

11. WAP to implement SELECTION SORT using functions

12. WAP to implement INSERTION SORT using functions

13. WAP to implement MERGE SORT using functions

14. WAP to implement the concept of Sparse Matrix

15. WAP to implement a SINGLY LINKED LIST with the
following functions-
Insert a node at front
Insert a node at last
Insert a node after a particular element
Insert a node before a particular element
Delete a node from front
Delete a node from last
Delete a particular node
Sort a list
Reverse a list
Count the nodes
Display the elements in list

16. WAP to implement a DOUBLY LINKED LIST with the
following functions-
Insert a node at front
Insert a node at last
Insert a node after a particular element
Insert a node before a particular element
Delete a node from front
Delete a node from last
Delete a particular node
Sort a list
Count the nodes
Display the elements in list

17. WAP to implement the circular linked list (singly).

18. WAP to implement Polynomial addition operation using linked
list.

19. Write a C program to create two linked lists from a given list in
following way
INPUT List-1 2 3 4 5 6 7 8 9 10
OUTPUT:-
First List :- 1 3 5 7 9
Second List :-2 4 6 8 10

20. WAP to implement Student Database using Linked List with the
following structure
- Name
- Rollno
- Marks of 5 subjects
- Average
- Result, If the average <50, then print 'Fail', otherwise
'Pass'

21. WAP to implement the STACK using Linked List with
following functions-
Push an element in Stack
Pop an element from Stack
Display the elements in Stack

22. WAP to implement the STACK using Arrays with
following functions-
Push an element in Stack
Pop an element from Stack
Display the elements in Stack

23. WAP to evaluate a (i) PREFIX expression (ii) POSTFIX
expression using Stack

24. WAP to convert an INFIX expression to (i) PREFIX (ii)
POSTFIX using Stack

25. Sometimes a program requires two stacks containing the same
type of items. Suppose two stacks are stored in separate arrays,
then one stack might overflow while there is considerable
unused space in the other. A neat way to avoid this problem is
to put all spaces in one stack and let this stack grow from one
end of the array, and the other stack starts from the other end
and grows in the opposite direction, ie, toward the first stack. In
this way, if one stack turns out to be large and the other small,
then they will still both fit, and there will be no overflow until
all space is used. Declare a new structure that includes these
two stacks and perform various stack operations.

26. WAP to implement CIRCULAR QUEUE using Arrays

27. WAP to implement QUEUE using Linked List

28. WAP to implement PRIORITY QUEUE using Linked
List

29. WAP to implement NON-CIRCULAR QUEUE using
Arrays

30. WAP to implement DEQUE using Arrays

31. WAP to implement DEQUE using Linked List

32. Let us assume a Patient's coupon generator for the Doctors'
clinic. The patients are given the coupons on first-come-first-
serve basis. After the visit of a patient, patient-ID is kept stack-
wise. At the end of the day, the count is generated from the
stack. Construct a menu-based program for patients' coupons
generator using an appropriate data structure.

33. WAP to implement Binary Search Tree (BST) with the
following functions-
1. Insert a node in BST
2. Delete a node from BST
3. INORDER Traversal
4. POSTORDER Traversal
5. PREORDER Traversal

34. WAP to implement an expression tree. (For example:
(a+b/(c*d)-e)
